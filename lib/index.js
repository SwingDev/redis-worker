var ERR_DRY_POOL, RedisConnectionManager, Worker, WorkerError, async, createError, domain, errors,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

domain = require('domain');

async = require('async');

RedisConnectionManager = require("redis-connection-manager").RedisConnectionManager;

errors = require('./errors');

createError = errors.createError;

WorkerError = errors.WorkerError;

ERR_DRY_POOL = errors.ERR_DRY_POOL;

Worker = (function() {
  Worker.prototype.gracefulShutdownTimeout = 15000;

  Worker.prototype.tasksRunning = 0;

  Worker.prototype.incRunningTasks = function() {
    return this.tasksRunning += 1;
  };

  Worker.prototype.decRunningTasks = function() {
    this.tasksRunning -= 1;
    if (!this.tasksRunning) {
      if (this.drainCallback != null) {
        return this.drainCallback();
      }
    }
  };

  function Worker(url, taskLimit) {
    this.url = url;
    this.taskLimit = taskLimit;
    this.handleTaskDomainError = bind(this.handleTaskDomainError, this);
    this.decRunningTasks = bind(this.decRunningTasks, this);
    this.incRunningTasks = bind(this.incRunningTasks, this);
    if (!this.url) {
      throw new Error('You must create Worker with Redis Url');
    }
    if (this.taskLimit == null) {
      this.taskLimit = 2;
    }
    this.taskNo = 1;
    this.redisQueueEmpty = false;
    this.shuttingDown = false;
    this.workerDomain = domain.create();
    this.workerDomain.on('error', (function(_this) {
      return function(err) {
        return _this.handleTaskDomainError(err);
      };
    })(this));
    this.queue = async.queue((function(_this) {
      return function(task, callback) {
        _this.workerDomain.enter();
        process.nextTick(function() {
          return _this.checkAndRunTask(function(err) {
            if (err) {
              console.error(err);
            }
            callback(null);
            return _this._fetchJobFromRedisToQueue();
          });
        });
        return _this.workerDomain.exit();
      };
    })(this), this.taskLimit);
  }

  Worker.prototype.name = function() {
    throw new Error('You must overwrite Worker#name in subclass');
  };

  Worker.prototype.listKey = function() {
    return "worker:list:" + (this.name());
  };

  Worker.prototype.channelKey = function() {
    return "worker:channel:" + (this.name());
  };

  Worker.prototype.obtainListClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'list', done);
  };

  Worker.prototype.obtainChannelClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'channel', done);
  };

  Worker.prototype.popJobFromQueue = function(cb) {
    return this.obtainListClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(createError(err, 'LISTNOTFOUND'));
        }
        return client.lpop(_this.listKey(), cb);
      };
    })(this));
  };

  Worker.prototype.checkAndRunTask = function(cb) {
    return this.popJobFromQueue((function(_this) {
      return function(err, task) {
        if (err) {
          return cb(createError(err, 'POPJOB'));
        }
        if (!task) {
          _this.redisQueueEmpty = true;
          return cb();
        }
        _this.redisQueueEmpty = false;
        _this.incRunningTasks();
        return _this.work(task, function(err) {
          _this.decRunningTasks();
          if (!err) {
            return cb();
          }
          return _this.error(err, task, function(err) {
            if (err) {
              return cb(createError(err, 'RUNTASK'));
            }
            return cb(null);
          });
        });
      };
    })(this));
  };

  Worker.prototype.work = function() {
    throw new Error('You must overwrite Worker#work in subclass');
  };

  Worker.prototype.error = function() {
    throw new Error('You must overwrite Worker#error in subclass');
  };

  Worker.prototype.handleTaskDomainError = function(err) {
    var postWorkHook;
    console.error("Detected an unknown error <" + err + ">, shutting down after this cycle or in " + (this.gracefulShutdownTimeout / 1000.0) + " seconds.");
    console.error(err.stack);
    if (!this.shuttingDown) {
      this.shuttingDown = true;
      postWorkHook = (function(_this) {
        return function() {
          if (!_this.shutDown) {
            console.warn("Post work, shutting down.");
            _this.workerDomain.dispose();
            process.exit(-1);
          }
          return _this.shutDown = true;
        };
      })(this);
      this.drainCallback = postWorkHook;
      setTimeout(postWorkHook, this.gracefulShutdownTimeout);
    }
    return this.decRunningTasks();
  };

  Worker.prototype.waitForTasks = function(cb) {
    return this.obtainChannelClient((function(_this) {
      return function(err, channel_client) {
        if (err) {
          return cb(createError(err, 'CHANNELNOTFOUND'));
        }
        _this.obtainListClient(function(err, list_client) {
          return list_client.llen(_this.listKey(), function(err, length) {
            var i, idx, prequeuedTasksNo, ref, results;
            prequeuedTasksNo = Math.max(1, Math.min(length, _this.taskLimit));
            if (length) {
              results = [];
              for (idx = i = 1, ref = prequeuedTasksNo; 1 <= ref ? i <= ref : i >= ref; idx = 1 <= ref ? ++i : --i) {
                results.push(_this._fetchJobFromRedisToQueue());
              }
              return results;
            }
          });
        });
        channel_client.on('message', function(channel, message) {
          if (channel === _this.channelKey()) {
            if (!_this._canTakeNewTasks()) {
              return;
            }
            return _this._fetchJobFromRedisToQueue(true);
          }
        });
        channel_client.subscribe(_this.channelKey());
        return cb();
      };
    })(this));
  };

  Worker.prototype.pushJob = function(jobDict, cb) {
    var payload;
    payload = JSON.stringify(jobDict);
    return async.series([
      (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.rpush(_this.listKey(), payload, callback);
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.publish(_this.channelKey(), payload, callback);
          });
        };
      })(this)
    ], function(err) {
      if (err) {
        return cb(createError(err, 'PUSHJOB'));
      }
      return cb(null);
    });
  };

  Worker.prototype._canTakeNewTasks = function() {
    return this.queue.running() + this.queue.length() < this.taskLimit;
  };

  Worker.prototype._fetchJobFromRedisToQueue = function(force) {
    var tmpTaskNo;
    if ((!this.redisQueueEmpty || force) && !this.shuttingDown) {
      tmpTaskNo = this.taskNo;
      this.queue.push(this.taskNo, function(err) {});
      return this.taskNo++;
    }
  };

  return Worker;

})();


/* */

exports.Worker = Worker;

exports.WorkerError = WorkerError;

//# sourceMappingURL=data:application/json;base64,
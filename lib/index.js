var ERR_DRY_POOL, RedisConnectionManager, Worker, WorkerError, async, createError, errors;

async = require('async');

RedisConnectionManager = require("redis-connection-manager").RedisConnectionManager;

errors = require('./errors');

createError = errors.createError;

WorkerError = errors.WorkerError;

ERR_DRY_POOL = errors.ERR_DRY_POOL;

Worker = (function() {
  function Worker(url, taskLimit) {
    this.url = url;
    this.taskLimit = taskLimit;
    if (!this.url) {
      throw new Error('You must create Worker with Redis Url');
    }
    if (!this.taskLimit) {
      this.taskLimit = 5;
    }
    this.taskNo = 0;
    this.taskClean = false;
    this.errInQueue = false;
    this.queue = async.queue((function(_this) {
      return function(task, callback) {
        return _this.checkAndRunTask(function(err) {
          if (err) {
            this.errInQueue = true;
            console.error('Error at worker queue', err);
            setTimeout(function() {
              return process.exit(-1);
            }, 15000);
            return callback(err);
          }
          return callback();
        });
      };
    })(this), this.taskLimit);
    this.queue.drain = (function(_this) {
      return function() {
        if (!_this.taskClean && !_this.errInQueue) {
          _this.taskNo++;
          return _this.queue.push(_this.taskNo, function(err) {
            if (err) {
              cb(err);
            }
          });
        }
      };
    })(this);
  }

  Worker.prototype.name = function() {
    throw new Error('You must overwrite Worker#name in subclass');
  };

  Worker.prototype.listKey = function() {
    return "worker:list:" + (this.name());
  };

  Worker.prototype.channelKey = function() {
    return "worker:channel:" + (this.name());
  };

  Worker.prototype.obtainListClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'list', done);
  };

  Worker.prototype.obtainChannelClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'channel', done);
  };

  Worker.prototype.popJobFromQueue = function(cb) {
    return this.obtainListClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(createError(err, 'LISTNOTFOUND'));
        }
        return client.lpop(_this.listKey(), cb);
      };
    })(this));
  };

  Worker.prototype.checkAndRunTask = function(cb) {
    return this.popJobFromQueue((function(_this) {
      return function(err, task) {
        if (err) {
          return cb(createError(err, 'POPJOB'));
        }
        if (!task) {
          _this.taskClean = true;
          return cb();
        }
        return _this.work(task, function(err) {
          if (err) {
            return _this.error(err, task, function(err) {
              return cb(createError(err, 'RUNTASK'));
            });
          } else {
            return cb();
          }
        });
      };
    })(this));
  };

  Worker.prototype.work = function() {
    throw new Error('You must overwrite Worker#work in subclass');
  };

  Worker.prototype.error = function() {
    throw new Error('You must overwrite Worker#error in subclass');
  };

  Worker.prototype.waitForTasks = function(cb) {
    return this.obtainChannelClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(createError(err, 'CHANNELNOTFOUND'));
        }
        _this.obtainListClient(function(err, listClient) {
          return listClient.llen(_this.listKey(), function(err, length) {
            var count, _i, _results;
            if (length > 0) {
              _results = [];
              for (count = _i = length; length <= 1 ? _i <= 1 : _i >= 1; count = length <= 1 ? ++_i : --_i) {
                _this.taskNo++;
                _results.push(_this.queue.push(_this.taskNo, function(err) {
                  if (err) {
                    cb(err);
                  }
                }));
              }
              return _results;
            }
          });
        });
        client.on('message', function(channel, message) {
          if (channel === _this.channelKey()) {
            if (!_this.errInQueue) {
              _this.taskClean = false;
              _this.taskNo++;
              return _this.queue.push(_this.taskNo, function(err) {
                if (err) {
                  cb(err);
                }
              });
            }
          }
        });
        client.subscribe(_this.channelKey());
        return cb();
      };
    })(this));
  };

  Worker.prototype.pushJob = function(jobDict, cb) {
    var payload;
    payload = JSON.stringify(jobDict);
    return async.series([
      (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.rpush(_this.listKey(), payload, callback);
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.publish(_this.channelKey(), payload, callback);
          });
        };
      })(this)
    ], function(err) {
      return cb(createError(err, 'PUSHJOB'));
    });
  };

  return Worker;

})();


/* */

exports.Worker = Worker;

exports.WorkerError = WorkerError;

//# sourceMappingURL=data:application/json;base64,
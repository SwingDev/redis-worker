var ERR_DRY_POOL, RedisConnectionManager, Worker, async;

async = require('async');

RedisConnectionManager = require("redisconnectionmanager");

ERR_DRY_POOL = 'DRY_POOL';

Worker = (function() {
  function Worker(url) {
    this.url = url;
    if (!this.url) {
      throw new Error('You must create Worker with Redis Url');
    }
    return;
  }

  Worker.prototype.name = function() {
    throw new Error('You must overwrite Worker#name in subclass');
  };

  Worker.prototype.listKey = function() {
    return "worker:list:" + (this.name());
  };

  Worker.prototype.channelKey = function() {
    return "worker:channel:" + (this.name());
  };

  Worker.prototype.obtainListClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'list', done);
  };

  Worker.prototype.obtainChannelClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'channel', done);
  };

  Worker.prototype.popJobFromQueue = function(cb) {
    return this.obtainListClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(err);
        }
        return client.lpop(_this.listKey(), cb);
      };
    })(this));
  };

  Worker.prototype.checkAndRunTask = function() {
    if (this.busy) {
      return;
    }
    this.busy = true;
    return async.forever((function(_this) {
      return function(next) {
        return _this.popJobFromQueue(function(err, task) {
          if (err) {
            return next(err);
          }
          if (!task) {
            return next(ERR_DRY_POOL);
          }
          return _this.work(task, function(err) {
            if (err) {
              return _this.error(err, task, function() {
                return next();
              });
            } else {
              return next();
            }
          });
        });
      };
    })(this), (function(_this) {
      return function(err) {
        _this.busy = false;
        if (err === ERR_DRY_POOL) {

        } else if (err) {
          return console.log('[Error]', err);
        }
      };
    })(this));
  };

  Worker.prototype.work = function() {
    throw new Error('You must overwrite Worker#work in subclass');
  };

  Worker.prototype.error = function() {
    throw new Error('You must overwrite Worker#error in subclass');
  };

  Worker.prototype.waitForTasks = function(cb) {
    return this.obtainChannelClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(err);
        }
        _this.checkAndRunTask();
        client.on('message', function(channel, message) {
          if (channel === _this.channelKey()) {
            return _this.checkAndRunTask();
          }
        });
        client.subscribe(_this.channelKey());
        return cb();
      };
    })(this));
  };

  Worker.prototype.pushJob = function(jobDict, cb) {
    var payload;
    payload = JSON.stringify(jobDict);
    return async.series([
      (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(err);
            }
            return client.rpush(_this.listKey(), payload, callback);
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(err);
            }
            return client.publish(_this.channelKey(), payload, callback);
          });
        };
      })(this)
    ], function(err) {
      return cb(err);
    });
  };

  return Worker;

})();

module.exports = Worker;

//# sourceMappingURL=data:application/json;base64,
var ERR_DRY_POOL, RedisConnectionManager, Worker, WorkerError, _, async, createError, domain, errors, moment,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = require('lodash');

domain = require('domain');

async = require('async');

moment = require('moment');

RedisConnectionManager = require("redis-connection-manager").RedisConnectionManager;

errors = require('./errors');

createError = errors.createError;

WorkerError = errors.WorkerError;

ERR_DRY_POOL = errors.ERR_DRY_POOL;

Worker = (function() {
  Worker.prototype.gracefulShutdownTimeout = 15000;

  Worker.prototype.tasksRunning = 0;

  Worker.prototype.incRunningTasks = function() {
    return this.tasksRunning += 1;
  };

  Worker.prototype.decRunningTasks = function() {
    this.tasksRunning -= 1;
    if (!this.tasksRunning) {
      if (this.drainCallback != null) {
        return this.drainCallback();
      }
    }
  };

  function Worker(options) {
    this.handleErrorTasks = bind(this.handleErrorTasks, this);
    this.handleTaskDomainError = bind(this.handleTaskDomainError, this);
    this.decRunningTasks = bind(this.decRunningTasks, this);
    this.incRunningTasks = bind(this.incRunningTasks, this);
    this.url = options.url, this.taskLimit = options.taskLimit, this.retryTasks = options.retryTasks, this.retryPopTasksInterval = options.retryPopTasksInterval, this.backoffInterval = options.backoffInterval, this.maxRetries = options.maxRetries;
    if (!this.url) {
      throw new Error('You must create Worker with Redis Url');
    }
    if (this.taskLimit == null) {
      this.taskLimit = 2;
    }
    if (this.retryTasks == null) {
      this.retryTasks = false;
    }
    if (this.retryPopTasksInterval == null) {
      this.retryPopTasksInterval = 10 * 1000;
    }
    if (this.backoffInterval == null) {
      this.backoffInterval = 30 * 1000;
    }
    if (this.maxRetries == null) {
      this.maxRetries = 3;
    }
    this.taskNo = 1;
    this.redisQueueEmpty = false;
    this.shuttingDown = false;
    this.workerDomain = domain.create();
    this.workerDomain.on('error', (function(_this) {
      return function(err) {
        return _this.handleTaskDomainError(err);
      };
    })(this));
    this.queue = async.queue((function(_this) {
      return function(task, callback) {
        _this.workerDomain.enter();
        process.nextTick(function() {
          return _this.checkAndRunTask(function(err) {
            if (err) {
              console.error(err);
            }
            callback(null);
            return _this._fetchJobFromRedisToQueue();
          });
        });
        return _this.workerDomain.exit();
      };
    })(this), this.taskLimit);
  }

  Worker.prototype.name = function() {
    throw new Error('You must overwrite Worker#name in subclass');
  };

  Worker.prototype.listKey = function() {
    return "worker:list:" + (this.name());
  };

  Worker.prototype.errorsSetKey = function() {
    return "worker:errors:" + (this.name());
  };

  Worker.prototype.channelKey = function() {
    return "worker:channel:" + (this.name());
  };

  Worker.prototype.obtainListClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'list', done);
  };

  Worker.prototype.obtainChannelClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'channel', done);
  };

  Worker.prototype.obtainErrorsSetClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'errors', done);
  };

  Worker.prototype.popErrJobFromQueue = function(cb) {
    return this.obtainErrorsSetClient((function(_this) {
      return function(err, client) {
        var timestamp;
        if (err) {
          return cb(createError(err, 'ERRSETNOTFOUND'));
        }
        timestamp = moment.utc().unix();
        return client.zrangebyscore(_this.errorsSetKey(), 0, timestamp, function(err, tasks) {
          if (err) {
            return cb(createError(err));
          }
          if (!(tasks || tasks.length)) {
            return cb(null);
          }
          return client.zremrangebyscore(_this.errorsSetKey(), 0, timestamp, function(err) {
            var asyncTasks;
            if (err) {
              return cb(createError(err));
            }
            asyncTasks = _.map(tasks, function(task) {
              return function(next) {
                return _this.pushJob(JSON.parse(task), next);
              };
            });
            return async.parallel(asyncTasks, cb);
          });
        });
      };
    })(this));
  };

  Worker.prototype.popJobFromQueue = function(cb) {
    return this.obtainListClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(createError(err, 'LISTNOTFOUND'));
        }
        return client.lpop(_this.listKey(), cb);
      };
    })(this));
  };

  Worker.prototype.checkAndRunTask = function(cb) {
    return this.popJobFromQueue((function(_this) {
      return function(err, task) {
        if (err) {
          return cb(createError(err, 'POPJOB'));
        }
        if (!task) {
          _this.redisQueueEmpty = true;
          return cb();
        }
        _this.redisQueueEmpty = false;
        _this.incRunningTasks();
        return _this.work(task, function(taskErr) {
          _this.decRunningTasks();
          if (!taskErr) {
            return cb();
          }
          return _this.error(taskErr, task, function(taskErr) {
            if (!taskErr) {
              return cb(null);
            }
            return _this.pushErrorJob(task, function(err) {
              if (err) {
                return cb(err);
              }
              if (taskErr) {
                return cb(createError(taskErr, 'RUNTASK'));
              }
              return cb(null);
            });
          });
        });
      };
    })(this));
  };

  Worker.prototype.work = function() {
    throw new Error('You must overwrite Worker#work in subclass');
  };

  Worker.prototype.error = function() {
    throw new Error('You must overwrite Worker#error in subclass');
  };

  Worker.prototype.handleTaskDomainError = function(err) {
    var postWorkHook;
    console.error("Detected an unknown error <" + err + ">, shutting down after this cycle or in " + (this.gracefulShutdownTimeout / 1000.0) + " seconds.");
    console.error(err.stack);
    if (!this.shuttingDown) {
      this.shuttingDown = true;
      postWorkHook = (function(_this) {
        return function() {
          if (!_this.shutDown) {
            console.warn("Post work, shutting down.");
            _this.workerDomain.dispose();
            process.exit(-1);
          }
          return _this.shutDown = true;
        };
      })(this);
      this.drainCallback = postWorkHook;
      setTimeout(postWorkHook, this.gracefulShutdownTimeout);
    }
    return this.decRunningTasks();
  };

  Worker.prototype.waitForTasks = function(cb) {
    return this.obtainChannelClient((function(_this) {
      return function(err, channel_client) {
        if (err) {
          return cb(createError(err, 'CHANNELNOTFOUND'));
        }
        _this.obtainListClient(function(err, list_client) {
          return list_client.llen(_this.listKey(), function(err, length) {
            var i, idx, prequeuedTasksNo, ref, results;
            prequeuedTasksNo = Math.max(1, Math.min(length, _this.taskLimit));
            if (length) {
              results = [];
              for (idx = i = 1, ref = prequeuedTasksNo; 1 <= ref ? i <= ref : i >= ref; idx = 1 <= ref ? ++i : --i) {
                results.push(_this._fetchJobFromRedisToQueue());
              }
              return results;
            }
          });
        });
        if (_this.retryTasks) {
          setInterval(_this.handleErrorTasks, _this.retryPopTasksInterval);
        }
        channel_client.on('message', function(channel, message) {
          if (channel === _this.channelKey()) {
            if (!_this._canTakeNewTasks()) {
              return;
            }
            return _this._fetchJobFromRedisToQueue(true);
          }
        });
        channel_client.subscribe(_this.channelKey());
        return cb();
      };
    })(this));
  };

  Worker.prototype.handleErrorTasks = function() {
    return this.popErrJobFromQueue(function(err) {
      if (err) {
        return console.error(err);
      }
    });
  };

  Worker.prototype.pushErrorJob = function(payload, cb) {
    var jobDict;
    if (!this.retryTasks) {
      return cb(null);
    }
    jobDict = JSON.parse(payload);
    if (jobDict.times_retried == null) {
      jobDict['times_retried'] = -1;
    }
    jobDict.times_retried++;
    if (jobDict.times_retried >= this.maxRetries) {
      return cb(null);
    }
    payload = JSON.stringify(jobDict);
    return async.series([
      (function(_this) {
        return function(next) {
          return _this.obtainErrorsSetClient(function(err, client) {
            if (err) {
              return next(createError(err, 'ERRSETNOTFOUND'));
            }
            return client.zadd(_this.errorsSetKey(), moment.utc().add(_this._calculateBackoff(jobDict.times_retried), 'ms').unix(), payload, next);
          });
        };
      })(this), (function(_this) {
        return function(next) {
          return _this.obtainErrorsSetClient(function(err, client) {
            if (err) {
              return next(createError(err, 'ERRSETNOTFOUND'));
            }
            return client.publish(_this.channelKey, payload, next);
          });
        };
      })(this)
    ], function(err) {
      if (err) {
        return cb(createError(err, 'PUSHERRJOB'));
      }
      return cb(null);
    });
  };

  Worker.prototype.pushJob = function(jobDict, cb) {
    var payload;
    payload = JSON.stringify(jobDict);
    return async.series([
      (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.rpush(_this.listKey(), payload, callback);
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.publish(_this.channelKey(), payload, callback);
          });
        };
      })(this)
    ], function(err) {
      if (err) {
        return cb(createError(err, 'PUSHJOB'));
      }
      return cb(null);
    });
  };

  Worker.prototype._canTakeNewTasks = function() {
    return this.queue.running() + this.queue.length() < this.taskLimit;
  };

  Worker.prototype._fetchJobFromRedisToQueue = function(force) {
    var tmpTaskNo;
    if ((!this.redisQueueEmpty || force) && !this.shuttingDown) {
      tmpTaskNo = this.taskNo;
      this.queue.push(this.taskNo, function(err) {});
      return this.taskNo++;
    }
  };

  Worker.prototype._calculateBackoff = function(numRetries) {
    var randMultiplier;
    randMultiplier = Math.random() * (Math.pow(2, numRetries + 2) - 1);
    if (numRetries === 0) {
      randMultiplier = 1;
    }
    return (this.backoffInterval * randMultiplier).toFixed(2);
  };

  return Worker;

})();


/* */

exports.Worker = Worker;

exports.WorkerError = WorkerError;

//# sourceMappingURL=data:application/json;base64,
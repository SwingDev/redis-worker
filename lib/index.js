var ERR_DRY_POOL, RedisConnectionManager, Worker, async;

async = require('async');

RedisConnectionManager = require("redis-connection-manager").RedisConnectionManager;

ERR_DRY_POOL = 'DRY_POOL';

Worker = (function() {
  function Worker(url) {
    this.url = url;
    if (!this.url) {
      throw new Error('You must create Worker with Redis Url');
    }
    return;
  }

  Worker.prototype.name = function() {
    throw new Error('You must overwrite Worker#name in subclass');
  };

  Worker.prototype.listKey = function() {
    return "worker:list:" + (this.name());
  };

  Worker.prototype.channelKey = function() {
    return "worker:channel:" + (this.name());
  };

  Worker.prototype.obtainListClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'list', done);
  };

  Worker.prototype.obtainChannelClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'channel', done);
  };

  Worker.prototype.popJobFromQueue = function(cb) {
    return this.obtainListClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(err);
        }
        return client.lpop(_this.listKey(), cb);
      };
    })(this));
  };

  Worker.prototype.checkAndRunTask = function() {
    if (this.busy) {
      return;
    }
    this.busy = true;
    return async.forever((function(_this) {
      return function(next) {
        return _this.popJobFromQueue(function(err, task) {
          if (err) {
            return next(err);
          }
          if (!task) {
            return next(ERR_DRY_POOL);
          }
          return _this.work(task, function(err) {
            if (err) {
              return _this.error(err, task, function() {
                return next();
              });
            } else {
              return next();
            }
          });
        });
      };
    })(this), (function(_this) {
      return function(err) {
        _this.busy = false;
        if (err === ERR_DRY_POOL) {

        } else if (err) {
          return console.log('[Error]', err);
        }
      };
    })(this));
  };

  Worker.prototype.work = function() {
    throw new Error('You must overwrite Worker#work in subclass');
  };

  Worker.prototype.error = function() {
    throw new Error('You must overwrite Worker#error in subclass');
  };

  Worker.prototype.waitForTasks = function(cb) {
    return this.obtainChannelClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(err);
        }
        _this.checkAndRunTask();
        client.on('message', function(channel, message) {
          if (channel === _this.channelKey()) {
            return _this.checkAndRunTask();
          }
        });
        client.subscribe(_this.channelKey());
        return cb();
      };
    })(this));
  };

  Worker.prototype.pushJob = function(jobDict, cb) {
    var payload;
    payload = JSON.stringify(jobDict);
    return async.series([
      (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(err);
            }
            return client.rpush(_this.listKey(), payload, callback);
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(err);
            }
            return client.publish(_this.channelKey(), payload, callback);
          });
        };
      })(this)
    ], function(err) {
      return cb(err);
    });
  };

  return Worker;

})();

module.exports = Worker;

//# sourceMappingURL=data:application/json;base64,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QU9HLFNBQUMsR0FBRCxHQUFBO2FBQVMsRUFBQSxDQUFHLEdBQUgsRUFBVDtJQUFBLENBUEgsRUFGTztFQUFBLENBOURULENBQUE7O2dCQUFBOztJQVBGLENBQUE7O0FBQUEsTUFpRk0sQ0FBQyxPQUFQLEdBQWlCLE1BakZqQixDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYXN5bmMgICA9IHJlcXVpcmUoJ2FzeW5jJylcblJlZGlzQ29ubmVjdGlvbk1hbmFnZXIgPSByZXF1aXJlKFwicmVkaXMtY29ubmVjdGlvbi1tYW5hZ2VyXCIpLlJlZGlzQ29ubmVjdGlvbk1hbmFnZXJcblxuXG5FUlJfRFJZX1BPT0wgPSAnRFJZX1BPT0wnXG5cbmNsYXNzIFdvcmtlclxuICBjb25zdHJ1Y3RvcjogKEB1cmwpIC0+XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBjcmVhdGUgV29ya2VyIHdpdGggUmVkaXMgVXJsJykgdW5sZXNzIEB1cmxcbiAgICByZXR1cm5cblxuICBuYW1lOiAoKSAtPlxuICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgb3ZlcndyaXRlIFdvcmtlciNuYW1lIGluIHN1YmNsYXNzJylcblxuICAjIFJlZGlzXG4gIGxpc3RLZXk6ICAgICgpIC0+IFwid29ya2VyOmxpc3Q6I3tAbmFtZSgpfVwiXG4gIGNoYW5uZWxLZXk6ICgpIC0+IFwid29ya2VyOmNoYW5uZWw6I3tAbmFtZSgpfVwiXG5cbiAgb2J0YWluTGlzdENsaWVudDogICAgKGRvbmUpIC0+IFJlZGlzQ29ubmVjdGlvbk1hbmFnZXIub2J0YWluQ2xpZW50IEB1cmwsICdsaXN0JywgZG9uZVxuICBvYnRhaW5DaGFubmVsQ2xpZW50OiAoZG9uZSkgLT4gUmVkaXNDb25uZWN0aW9uTWFuYWdlci5vYnRhaW5DbGllbnQgQHVybCwgJ2NoYW5uZWwnLCBkb25lXG5cbiAgIyBJbnRlcm5hbFxuICBwb3BKb2JGcm9tUXVldWU6IChjYikgLT5cbiAgICBAb2J0YWluTGlzdENsaWVudCAoZXJyLCBjbGllbnQpID0+XG4gICAgICByZXR1cm4gY2IoZXJyKSBpZiBlcnJcbiAgICAgIGNsaWVudC5scG9wIEBsaXN0S2V5KCksIGNiXG5cbiAgY2hlY2tBbmRSdW5UYXNrOiAoKSAtPlxuICAgIHJldHVybiBpZiBAYnVzeVxuICAgIEBidXN5ID0gdHJ1ZVxuICAgIGFzeW5jLmZvcmV2ZXIoKG5leHQpID0+XG4gICAgICBAcG9wSm9iRnJvbVF1ZXVlIChlcnIsdGFzaykgPT5cbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKSBpZiBlcnJcbiAgICAgICAgcmV0dXJuIG5leHQoRVJSX0RSWV9QT09MKSB1bmxlc3MgdGFza1xuICAgICAgICBAd29yayB0YXNrLCAoZXJyKSA9PlxuICAgICAgICAgIGlmIGVyclxuICAgICAgICAgICAgQGVycm9yIGVyciwgdGFzaywgKCkgLT4gbmV4dCgpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgbmV4dCgpXG4gICAgLCAoZXJyKSA9PlxuICAgICAgQGJ1c3kgPSBmYWxzZVxuICAgICAgaWYgKGVyciA9PSBFUlJfRFJZX1BPT0wpXG4gICAgICAgIHJldHVyblxuICAgICAgICAjIGNvbnNvbGUubG9nICdubyBtb3JlIHRhc2tzJ1xuICAgICAgZWxzZSBpZiAoZXJyKVxuICAgICAgICBjb25zb2xlLmxvZyAnW0Vycm9yXScsIGVyclxuICAgIClcblxuICAjIFN1YmNsYXNzIEFQSVxuICB3b3JrOiAoKSAtPlxuICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgb3ZlcndyaXRlIFdvcmtlciN3b3JrIGluIHN1YmNsYXNzJylcblxuICBlcnJvcjogKCkgLT5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IG92ZXJ3cml0ZSBXb3JrZXIjZXJyb3IgaW4gc3ViY2xhc3MnKVxuXG4gICMgQVBJXG4gIHdhaXRGb3JUYXNrczogKGNiKSAtPlxuICAgIEBvYnRhaW5DaGFubmVsQ2xpZW50IChlcnIsIGNsaWVudCkgPT5cbiAgICAgIHJldHVybiBjYihlcnIpIGlmIGVyclxuXG4gICAgICBAY2hlY2tBbmRSdW5UYXNrKClcblxuICAgICAgY2xpZW50Lm9uICdtZXNzYWdlJywgKGNoYW5uZWwsIG1lc3NhZ2UpID0+XG4gICAgICAgIEBjaGVja0FuZFJ1blRhc2soKSBpZiBjaGFubmVsID09IEBjaGFubmVsS2V5KClcblxuICAgICAgY2xpZW50LnN1YnNjcmliZShAY2hhbm5lbEtleSgpKVxuXG4gICAgICBjYigpXG5cbiAgcHVzaEpvYjogKGpvYkRpY3QsIGNiKSAtPlxuICAgIHBheWxvYWQgPSBKU09OLnN0cmluZ2lmeShqb2JEaWN0KVxuICAgIGFzeW5jLnNlcmllcyhbXG4gICAgICAoY2FsbGJhY2spID0+IEBvYnRhaW5MaXN0Q2xpZW50IChlcnIsY2xpZW50KSA9PlxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKSBpZiBlcnJcbiAgICAgICAgY2xpZW50LnJwdXNoKEBsaXN0S2V5KCksIHBheWxvYWQsIGNhbGxiYWNrKVxuICAgICAgKGNhbGxiYWNrKSA9PiBAb2J0YWluTGlzdENsaWVudCAoZXJyLGNsaWVudCkgPT5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycikgaWYgZXJyXG4gICAgICAgIGNsaWVudC5wdWJsaXNoKEBjaGFubmVsS2V5KCksIHBheWxvYWQsIGNhbGxiYWNrKVxuICAgIF0sIChlcnIpIC0+IGNiKGVycikpXG5cblxubW9kdWxlLmV4cG9ydHMgPSBXb3JrZXJcbiJdfQ==
var ERR_DRY_POOL, RedisConnectionManager, Worker, WorkerError, async, createError, errors;

async = require('async');

RedisConnectionManager = require("redis-connection-manager").RedisConnectionManager;

errors = require('./errors');

createError = errors.createError;

WorkerError = errors.WorkerError;

ERR_DRY_POOL = errors.ERR_DRY_POOL;

Worker = (function() {
  function Worker(url, taskLimit) {
    this.url = url;
    this.taskLimit = taskLimit;
    if (!this.url) {
      throw new Error('You must create Worker with Redis Url');
    }
    if (!this.taskLimit) {
      this.taskLimit = 5;
    }
    this.taskNo = 0;
    this.taskClean = false;
    this.errInQueue = false;
    this.queue = async.queue((function(_this) {
      return function(task, callback) {
        return _this.checkAndRunTask(function(err) {
          if (err) {
            this.errInQueue = true;
            console.error('Error at worker queue', err);
            setTimeout(function() {
              return process.exit(-1);
            }, 15000);
            return callback(err);
          }
          return callback();
        });
      };
    })(this), this.taskLimit);
    this.queue.drain = (function(_this) {
      return function() {
        if (!_this.taskClean && !_this.errInQueue) {
          _this.taskNo++;
          return _this.queue.push(_this.taskNo, function(err) {
            if (err) {
              cb(err);
            }
          });
        }
      };
    })(this);
  }

  Worker.prototype.name = function() {
    throw new Error('You must overwrite Worker#name in subclass');
  };

  Worker.prototype.listKey = function() {
    return "worker:list:" + (this.name());
  };

  Worker.prototype.channelKey = function() {
    return "worker:channel:" + (this.name());
  };

  Worker.prototype.obtainListClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'list', done);
  };

  Worker.prototype.obtainChannelClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'channel', done);
  };

  Worker.prototype.popJobFromQueue = function(cb) {
    return this.obtainListClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(createError(err, 'LISTNOTFOUND'));
        }
        return client.lpop(_this.listKey(), cb);
      };
    })(this));
  };

  Worker.prototype.checkAndRunTask = function(cb) {
    return this.popJobFromQueue((function(_this) {
      return function(err, task) {
        if (err) {
          return cb(createError(err, 'POPJOB'));
        }
        if (!task) {
          _this.taskClean = true;
          return cb();
        }
        return _this.work(task, function(err) {
          if (err) {
            return _this.error(err, task, function(err) {
              return cb(createError(err, 'RUNTASK'));
            });
          } else {
            return cb();
          }
        });
      };
    })(this));
  };

  Worker.prototype.work = function() {
    throw new Error('You must overwrite Worker#work in subclass');
  };

  Worker.prototype.error = function() {
    throw new Error('You must overwrite Worker#error in subclass');
  };

  Worker.prototype.waitForTasks = function(cb) {
    return this.obtainChannelClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(createError(err, 'CHANNELNOTFOUND'));
        }
        client.llen(_this.listKey(), function(err, length) {
          var count, _i, _results;
          if (length > 0) {
            _results = [];
            for (count = _i = length; length <= 1 ? _i <= 1 : _i >= 1; count = length <= 1 ? ++_i : --_i) {
              _this.taskNo++;
              _results.push(_this.queue.push(_this.taskNo, function(err) {
                if (err) {
                  cb(err);
                }
              }));
            }
            return _results;
          }
        });
        client.on('message', function(channel, message) {
          if (channel === _this.channelKey()) {
            if (!_this.errInQueue) {
              _this.taskClean = false;
              _this.taskNo++;
              return _this.queue.push(_this.taskNo, function(err) {
                if (err) {
                  cb(err);
                }
              });
            }
          }
        });
        client.subscribe(_this.channelKey());
        return cb();
      };
    })(this));
  };

  Worker.prototype.pushJob = function(jobDict, cb) {
    var payload;
    payload = JSON.stringify(jobDict);
    return async.series([
      (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.rpush(_this.listKey(), payload, callback);
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.publish(_this.channelKey(), payload, callback);
          });
        };
      })(this)
    ], function(err) {
      return cb(createError(err, 'PUSHJOB'));
    });
  };

  return Worker;

})();


/* */

exports.Worker = Worker;

exports.WorkerError = WorkerError;

//# sourceMappingURL=data:application/json;base64,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O0FBc0hBO0FBQUEsS0F0SEE7O0FBQUEsT0F3SE8sQ0FBQyxNQUFSLEdBQWlCLE1BeEhqQixDQUFBOztBQUFBLE9BeUhPLENBQUMsV0FBUixHQUFzQixXQXpIdEIsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFzeW5jICAgPSByZXF1aXJlKCdhc3luYycpXG5SZWRpc0Nvbm5lY3Rpb25NYW5hZ2VyID0gcmVxdWlyZShcInJlZGlzLWNvbm5lY3Rpb24tbWFuYWdlclwiKS5SZWRpc0Nvbm5lY3Rpb25NYW5hZ2VyXG5lcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpXG5cbmNyZWF0ZUVycm9yID0gZXJyb3JzLmNyZWF0ZUVycm9yXG5Xb3JrZXJFcnJvciA9IGVycm9ycy5Xb3JrZXJFcnJvclxuRVJSX0RSWV9QT09MID0gZXJyb3JzLkVSUl9EUllfUE9PTFxuXG5cbmNsYXNzIFdvcmtlclxuICBjb25zdHJ1Y3RvcjogKEB1cmwsIEB0YXNrTGltaXQpIC0+XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBjcmVhdGUgV29ya2VyIHdpdGggUmVkaXMgVXJsJykgdW5sZXNzIEB1cmxcbiAgICBAdGFza0xpbWl0ID0gNSB1bmxlc3MgQHRhc2tMaW1pdFxuICAgIEB0YXNrTm8gPSAwXG4gICAgQHRhc2tDbGVhbiA9IGZhbHNlXG4gICAgQGVyckluUXVldWUgPSBmYWxzZVxuXG4gICAgQHF1ZXVlID0gYXN5bmMucXVldWUoKHRhc2ssIGNhbGxiYWNrKSA9PlxuICAgICAgIyBjb25zb2xlLmxvZyAnXFxuXFxuXFxudGFza05vJyArIHRhc2tcbiAgICAgICMgY29uc29sZS5sb2cgJ3Rhc2tsaW1pdCcsIEB0YXNrTGltaXRcbiAgICAgICMgY29uc29sZS5sb2cgJ2NvbmN1cmVuY3kgdmFsJywgQHF1ZXVlLmNvbmN1cnJlbmN5XG4gICAgICAjIGNvbnNvbGUubG9nICdudW1iZXIgb2YgdGFza3MgaW4gcXVldWUnLCBAcXVldWUubGVuZ3RoKClcbiAgICAgICMgY29uc29sZS5sb2cgJ251bWJlciBvZiB0YXNrcyBydW5uaW5nJywgQHF1ZXVlLnJ1bm5pbmcoKVxuICAgICAgQGNoZWNrQW5kUnVuVGFzayAoZXJyKSAtPlxuICAgICAgICBpZiBlcnJcbiAgICAgICAgICBAZXJySW5RdWV1ZSA9IHRydWVcbiAgICAgICAgICBjb25zb2xlLmVycm9yICdFcnJvciBhdCB3b3JrZXIgcXVldWUnLCBlcnJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpIC0+XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoLTEpXG4gICAgICAgICAgLCAxNTAwMClcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKVxuICAgICAgICBjYWxsYmFjaygpXG4gICAgLCBAdGFza0xpbWl0KVxuXG4gICAgQHF1ZXVlLmRyYWluID0gKCkgPT5cbiAgICAgIGlmIG5vdCBAdGFza0NsZWFuIGFuZCBub3QgQGVyckluUXVldWVcbiAgICAgICAgQHRhc2tObysrXG4gICAgICAgIEBxdWV1ZS5wdXNoIEB0YXNrTm8sIChlcnIpIC0+XG4gICAgICAgICAgY2IoZXJyKSBpZiBlcnJcbiAgICAgICAgICByZXR1cm5cblxuICBuYW1lOiAoKSAtPlxuICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgb3ZlcndyaXRlIFdvcmtlciNuYW1lIGluIHN1YmNsYXNzJylcblxuICAjIFJlZGlzXG4gIGxpc3RLZXk6ICAgICgpIC0+IFwid29ya2VyOmxpc3Q6I3tAbmFtZSgpfVwiXG4gIGNoYW5uZWxLZXk6ICgpIC0+IFwid29ya2VyOmNoYW5uZWw6I3tAbmFtZSgpfVwiXG5cbiAgb2J0YWluTGlzdENsaWVudDogICAgKGRvbmUpIC0+IFJlZGlzQ29ubmVjdGlvbk1hbmFnZXIub2J0YWluQ2xpZW50IEB1cmwsICdsaXN0JywgZG9uZVxuICBvYnRhaW5DaGFubmVsQ2xpZW50OiAoZG9uZSkgLT4gUmVkaXNDb25uZWN0aW9uTWFuYWdlci5vYnRhaW5DbGllbnQgQHVybCwgJ2NoYW5uZWwnLCBkb25lXG5cbiAgIyBJbnRlcm5hbFxuICBwb3BKb2JGcm9tUXVldWU6IChjYikgLT5cbiAgICBAb2J0YWluTGlzdENsaWVudCAoZXJyLCBjbGllbnQpID0+XG4gICAgICByZXR1cm4gY2IgY3JlYXRlRXJyb3IoZXJyLCAnTElTVE5PVEZPVU5EJykgaWYgZXJyXG4gICAgICBjbGllbnQubHBvcCBAbGlzdEtleSgpLCBjYlxuXG4gIGNoZWNrQW5kUnVuVGFzazogKGNiKSAtPlxuICAgIEBwb3BKb2JGcm9tUXVldWUgKGVycix0YXNrKSA9PlxuICAgICAgcmV0dXJuIGNiKGNyZWF0ZUVycm9yKGVyciwgJ1BPUEpPQicpKSBpZiBlcnJcbiAgICAgIHVubGVzcyB0YXNrXG4gICAgICAgIEB0YXNrQ2xlYW4gPSB0cnVlXG4gICAgICAgIHJldHVybiBjYigpXG4gICAgICBAd29yayB0YXNrLCAoZXJyKSA9PlxuICAgICAgICBpZiBlcnJcbiAgICAgICAgICBAZXJyb3IgZXJyLCB0YXNrLCAoZXJyKSAtPiBjYihjcmVhdGVFcnJvcihlcnIsICdSVU5UQVNLJykpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjYigpXG5cblxuICAjIFN1YmNsYXNzIEFQSVxuICB3b3JrOiAoKSAtPlxuICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgb3ZlcndyaXRlIFdvcmtlciN3b3JrIGluIHN1YmNsYXNzJylcblxuICBlcnJvcjogKCkgLT5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IG92ZXJ3cml0ZSBXb3JrZXIjZXJyb3IgaW4gc3ViY2xhc3MnKVxuXG4gICMgQVBJXG4gIHdhaXRGb3JUYXNrczogKGNiKSAtPlxuICAgIEBvYnRhaW5DaGFubmVsQ2xpZW50IChlcnIsIGNsaWVudCkgPT5cbiAgICAgIHJldHVybiBjYiBjcmVhdGVFcnJvcihlcnIsICdDSEFOTkVMTk9URk9VTkQnKSBpZiBlcnJcblxuICAgICAgY2xpZW50LmxsZW4gQGxpc3RLZXkoKSwgKGVyciwgbGVuZ3RoKSA9PlxuICAgICAgICBpZiBsZW5ndGggPiAwXG4gICAgICAgICAgZm9yIGNvdW50IGluIFtsZW5ndGguLjFdXG4gICAgICAgICAgICBAdGFza05vKytcbiAgICAgICAgICAgIEBxdWV1ZS5wdXNoIEB0YXNrTm8sIChlcnIpIC0+XG4gICAgICAgICAgICAgIGNiKGVycikgaWYgZXJyXG4gICAgICAgICAgICAgIHJldHVyblxuXG4gICAgICBjbGllbnQub24gJ21lc3NhZ2UnLCAoY2hhbm5lbCwgbWVzc2FnZSkgPT5cbiAgICAgICAgaWYgY2hhbm5lbCA9PSBAY2hhbm5lbEtleSgpXG4gICAgICAgICAgdW5sZXNzIEBlcnJJblF1ZXVlXG4gICAgICAgICAgICBAdGFza0NsZWFuID0gZmFsc2VcbiAgICAgICAgICAgIEB0YXNrTm8rK1xuICAgICAgICAgICAgQHF1ZXVlLnB1c2ggQHRhc2tObywgKGVycikgLT5cbiAgICAgICAgICAgICAgY2IoZXJyKSBpZiBlcnJcbiAgICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgIGNsaWVudC5zdWJzY3JpYmUoQGNoYW5uZWxLZXkoKSlcblxuICAgICAgY2IoKVxuXG4gIHB1c2hKb2I6IChqb2JEaWN0LCBjYikgLT5cbiAgICBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoam9iRGljdClcbiAgICBhc3luYy5zZXJpZXMgW1xuICAgICAgKGNhbGxiYWNrKSA9PlxuICAgICAgICBAb2J0YWluTGlzdENsaWVudCAoZXJyLGNsaWVudCkgPT5cbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soY3JlYXRlRXJyb3IoZXJyLCAnTElTVE5PVEZPVU5EJykpIGlmIGVyclxuICAgICAgICAgIGNsaWVudC5ycHVzaChAbGlzdEtleSgpLCBwYXlsb2FkLCBjYWxsYmFjaylcbiAgICAgIChjYWxsYmFjaykgPT5cbiAgICAgICAgQG9idGFpbkxpc3RDbGllbnQgKGVycixjbGllbnQpID0+XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNyZWF0ZUVycm9yKGVyciwgJ0xJU1ROT1RGT1VORCcpKSBpZiBlcnJcbiAgICAgICAgICBjbGllbnQucHVibGlzaChAY2hhbm5lbEtleSgpLCBwYXlsb2FkLCBjYWxsYmFjaylcbiAgICBdLCAoZXJyKSAtPlxuICAgICAgY2IoY3JlYXRlRXJyb3IoZXJyLCAnUFVTSEpPQicpKVxuXG5cbiMjIyAjIyNcbiMgRVhQT1JUU1xuZXhwb3J0cy5Xb3JrZXIgPSBXb3JrZXJcbmV4cG9ydHMuV29ya2VyRXJyb3IgPSBXb3JrZXJFcnJvclxuIl19
var ERR_DRY_POOL, RedisConnectionManager, Worker, WorkerError, async, createError, errors;

async = require('async');

RedisConnectionManager = require("redis-connection-manager").RedisConnectionManager;

errors = require('./errors');

createError = errors.createError;

WorkerError = errors.WorkerError;

ERR_DRY_POOL = errors.ERR_DRY_POOL;

Worker = (function() {
  function Worker(url, taskLimit) {
    this.url = url;
    this.taskLimit = taskLimit;
    if (!this.url) {
      throw new Error('You must create Worker with Redis Url');
    }
    if (!this.taskLimit) {
      this.taskLimit = 2;
    }
    this.taskNo = 1;
    this.redisQueueEmpty = false;
    this.errInQueue = false;
    this.queue = async.queue((function(_this) {
      return function(task, callback) {
        return _this.checkAndRunTask(function(err) {
          if (err) {
            _this.errInQueue = true;
            console.error('Error at worker queue', err);
            setTimeout(function() {
              return process.exit(-1);
            }, 15000);
            return callback(err);
          }
          callback();
          return _this._fetchJobFromRedisToQueue();
        });
      };
    })(this), this.taskLimit);
  }

  Worker.prototype.name = function() {
    throw new Error('You must overwrite Worker#name in subclass');
  };

  Worker.prototype.listKey = function() {
    return "worker:list:" + (this.name());
  };

  Worker.prototype.channelKey = function() {
    return "worker:channel:" + (this.name());
  };

  Worker.prototype.obtainListClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'list', done);
  };

  Worker.prototype.obtainChannelClient = function(done) {
    return RedisConnectionManager.obtainClient(this.url, 'channel', done);
  };

  Worker.prototype.popJobFromQueue = function(cb) {
    return this.obtainListClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(createError(err, 'LISTNOTFOUND'));
        }
        return client.lpop(_this.listKey(), cb);
      };
    })(this));
  };

  Worker.prototype.checkAndRunTask = function(cb) {
    return this.popJobFromQueue((function(_this) {
      return function(err, task) {
        if (err) {
          return cb(createError(err, 'POPJOB'));
        }
        if (!task) {
          _this.redisQueueEmpty = true;
          return cb();
        }
        _this.redisQueueEmpty = false;
        return _this.work(task, function(err) {
          if (!err) {
            return cb();
          }
          return _this.error(err, task, function(err) {
            return cb(createError(err, 'RUNTASK'));
          });
        });
      };
    })(this));
  };

  Worker.prototype.work = function() {
    throw new Error('You must overwrite Worker#work in subclass');
  };

  Worker.prototype.error = function() {
    throw new Error('You must overwrite Worker#error in subclass');
  };

  Worker.prototype.waitForTasks = function(cb) {
    return this.obtainChannelClient((function(_this) {
      return function(err, client) {
        if (err) {
          return cb(createError(err, 'CHANNELNOTFOUND'));
        }
        client.llen(_this.listKey(), function(err, length) {
          var idx, _i, _ref, _ref1, _results;
          if (length) {
            _results = [];
            for (idx = _i = 1, _ref = (_ref1 = length < _this.taskLimit) != null ? _ref1 : {
              length: _this.taskLimit
            }; 1 <= _ref ? _i <= _ref : _i >= _ref; idx = 1 <= _ref ? ++_i : --_i) {
              _results.push(_this._fetchJobFromRedisToQueue());
            }
            return _results;
          }
        });
        client.on('message', function(channel, message) {
          if (channel === _this.channelKey()) {
            if (!_this._canTakeNewTasks()) {
              return;
            }
            return _this._fetchJobFromRedisToQueue(true);
          }
        });
        client.subscribe(_this.channelKey());
        return cb();
      };
    })(this));
  };

  Worker.prototype.pushJob = function(jobDict, cb) {
    var payload;
    payload = JSON.stringify(jobDict);
    return async.series([
      (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.rpush(_this.listKey(), payload, callback);
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          return _this.obtainListClient(function(err, client) {
            if (err) {
              return callback(createError(err, 'LISTNOTFOUND'));
            }
            return client.publish(_this.channelKey(), payload, callback);
          });
        };
      })(this)
    ], function(err) {
      return cb(createError(err, 'PUSHJOB'));
    });
  };

  Worker.prototype._canTakeNewTasks = function() {
    return this.queue.running() + this.queue.length() < this.taskLimit;
  };

  Worker.prototype._fetchJobFromRedisToQueue = function(force) {
    var tmpTaskNo;
    if ((!this.redisQueueEmpty || force) && !this.errInQueue) {
      tmpTaskNo = this.taskNo;
      this.queue.push(this.taskNo, (function(_this) {
        return function(err) {};
      })(this));
      return this.taskNo++;
    }
  };

  return Worker;

})();


/* */

exports.Worker = Worker;

exports.WorkerError = WorkerError;

//# sourceMappingURL=data:application/json;base64,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O0FBQUEsT0FtSU8sQ0FBQyxXQUFSLEdBQXNCLFdBbkl0QixDQUFBIiwiZmlsZSI6ImxpYi9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFzeW5jICAgPSByZXF1aXJlKCdhc3luYycpXG5SZWRpc0Nvbm5lY3Rpb25NYW5hZ2VyID0gcmVxdWlyZShcInJlZGlzLWNvbm5lY3Rpb24tbWFuYWdlclwiKS5SZWRpc0Nvbm5lY3Rpb25NYW5hZ2VyXG5lcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpXG5cbmNyZWF0ZUVycm9yID0gZXJyb3JzLmNyZWF0ZUVycm9yXG5Xb3JrZXJFcnJvciA9IGVycm9ycy5Xb3JrZXJFcnJvclxuRVJSX0RSWV9QT09MID0gZXJyb3JzLkVSUl9EUllfUE9PTFxuXG5cbmNsYXNzIFdvcmtlclxuICBjb25zdHJ1Y3RvcjogKEB1cmwsIEB0YXNrTGltaXQpIC0+XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBjcmVhdGUgV29ya2VyIHdpdGggUmVkaXMgVXJsJykgdW5sZXNzIEB1cmxcbiAgICBAdGFza0xpbWl0ID0gMiB1bmxlc3MgQHRhc2tMaW1pdFxuICAgIEB0YXNrTm8gPSAxXG4gICAgQHJlZGlzUXVldWVFbXB0eSA9IGZhbHNlXG4gICAgQGVyckluUXVldWUgPSBmYWxzZVxuXG4gICAgQHF1ZXVlID0gYXN5bmMucXVldWUoKHRhc2ssIGNhbGxiYWNrKSA9PlxuICAgICAgIyBjb25zb2xlLmxvZyAnXFxuPj4+Pj4gUVVFVUUnXG4gICAgICAjIGNvbnNvbGUubG9nICc+Pj4+PiB0YXNrbGltaXQnLCBAdGFza0xpbWl0XG4gICAgICAjIGNvbnNvbGUubG9nICc+Pj4+PiBjb25jdXJlbmN5IHZhbCcsIEBxdWV1ZS5jb25jdXJyZW5jeVxuICAgICAgIyBjb25zb2xlLmxvZyAnPj4+Pj4gbnVtYmVyIG9mIHRhc2tzIGluIHF1ZXVlJywgQHF1ZXVlLmxlbmd0aCgpXG4gICAgICAjIGNvbnNvbGUubG9nICc+Pj4+PiBudW1iZXIgb2YgdGFza3MgcnVubmluZycsIEBxdWV1ZS5ydW5uaW5nKCksICdcXG4nXG4gICAgICBAY2hlY2tBbmRSdW5UYXNrIChlcnIpID0+XG4gICAgICAgIGlmIGVyclxuICAgICAgICAgIEBlcnJJblF1ZXVlID0gdHJ1ZVxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IgJ0Vycm9yIGF0IHdvcmtlciBxdWV1ZScsIGVyclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgLT5cbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgtMSlcbiAgICAgICAgICAsIDE1MDAwKVxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpXG5cbiAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICBAX2ZldGNoSm9iRnJvbVJlZGlzVG9RdWV1ZSgpXG5cbiAgICAsIEB0YXNrTGltaXQpXG5cbiAgbmFtZTogKCkgLT5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IG92ZXJ3cml0ZSBXb3JrZXIjbmFtZSBpbiBzdWJjbGFzcycpXG5cbiAgIyBSZWRpc1xuICBsaXN0S2V5OiAgICAoKSAtPiBcIndvcmtlcjpsaXN0OiN7QG5hbWUoKX1cIlxuICBjaGFubmVsS2V5OiAoKSAtPiBcIndvcmtlcjpjaGFubmVsOiN7QG5hbWUoKX1cIlxuXG4gIG9idGFpbkxpc3RDbGllbnQ6ICAgIChkb25lKSAtPiBSZWRpc0Nvbm5lY3Rpb25NYW5hZ2VyLm9idGFpbkNsaWVudCBAdXJsLCAnbGlzdCcsIGRvbmVcbiAgb2J0YWluQ2hhbm5lbENsaWVudDogKGRvbmUpIC0+IFJlZGlzQ29ubmVjdGlvbk1hbmFnZXIub2J0YWluQ2xpZW50IEB1cmwsICdjaGFubmVsJywgZG9uZVxuXG4gICMgSW50ZXJuYWxcbiAgcG9wSm9iRnJvbVF1ZXVlOiAoY2IpIC0+XG4gICAgIyBjb25zb2xlLmxvZyAnPj4gUE9QSk9CJ1xuICAgIEBvYnRhaW5MaXN0Q2xpZW50IChlcnIsIGNsaWVudCkgPT5cbiAgICAgIHJldHVybiBjYiBjcmVhdGVFcnJvcihlcnIsICdMSVNUTk9URk9VTkQnKSBpZiBlcnJcbiAgICAgIGNsaWVudC5scG9wIEBsaXN0S2V5KCksIGNiXG5cbiAgY2hlY2tBbmRSdW5UYXNrOiAoY2IpIC0+XG4gICAgIyBjb25zb2xlLmxvZyAnPiBDSEVDS1JVTidcbiAgICBAcG9wSm9iRnJvbVF1ZXVlIChlcnIsdGFzaykgPT5cbiAgICAgIHJldHVybiBjYihjcmVhdGVFcnJvcihlcnIsICdQT1BKT0InKSkgaWYgZXJyXG4gICAgICB1bmxlc3MgdGFza1xuICAgICAgICAjIGNvbnNvbGUubG9nICc+Pj4gTk8gTU9SRSBUQVNLUydcbiAgICAgICAgQHJlZGlzUXVldWVFbXB0eSA9IHRydWVcbiAgICAgICAgcmV0dXJuIGNiKClcblxuICAgICAgQHJlZGlzUXVldWVFbXB0eSA9IGZhbHNlXG4gICAgICAjIGNvbnNvbGUubG9nICc+Pj4gVEFTSyBTVEFSVCBKT0InXG4gICAgICBAd29yayB0YXNrLCAoZXJyKSA9PlxuICAgICAgICByZXR1cm4gY2IoKSB1bmxlc3MgZXJyXG4gICAgICAgIEBlcnJvciBlcnIsIHRhc2ssIChlcnIpIC0+IFxuICAgICAgICAgIGNiKGNyZWF0ZUVycm9yKGVyciwgJ1JVTlRBU0snKSlcblxuXG5cbiAgIyBTdWJjbGFzcyBBUElcbiAgd29yazogKCkgLT5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IG92ZXJ3cml0ZSBXb3JrZXIjd29yayBpbiBzdWJjbGFzcycpXG5cbiAgZXJyb3I6ICgpIC0+XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBvdmVyd3JpdGUgV29ya2VyI2Vycm9yIGluIHN1YmNsYXNzJylcblxuICAjIEFQSVxuICB3YWl0Rm9yVGFza3M6IChjYikgLT5cbiAgICBAb2J0YWluQ2hhbm5lbENsaWVudCAoZXJyLCBjbGllbnQpID0+XG4gICAgICByZXR1cm4gY2IgY3JlYXRlRXJyb3IoZXJyLCAnQ0hBTk5FTE5PVEZPVU5EJykgaWYgZXJyXG5cbiAgICAgIGNsaWVudC5sbGVuIEBsaXN0S2V5KCksIChlcnIsIGxlbmd0aCkgPT5cbiAgICAgICAgQF9mZXRjaEpvYkZyb21SZWRpc1RvUXVldWUoKSBmb3IgaWR4IGluIFsxLi4obGVuZ3RoIDwgQHRhc2tMaW1pdCkgPyBsZW5ndGggOiBAdGFza0xpbWl0XSBpZiBsZW5ndGhcblxuICAgICAgY2xpZW50Lm9uICdtZXNzYWdlJywgKGNoYW5uZWwsIG1lc3NhZ2UpID0+XG4gICAgICAgICMgY29uc29sZS5sb2cgJ1xcbj4+Pj4+IE1TRycsIG1lc3NhZ2Uuc3Vic3RyKDM4LDcwKSwgJ1xcbidcbiAgICAgICAgaWYgY2hhbm5lbCA9PSBAY2hhbm5lbEtleSgpXG4gICAgICAgICAgcmV0dXJuIHVubGVzcyBAX2NhblRha2VOZXdUYXNrcygpXG4gICAgICAgICAgQF9mZXRjaEpvYkZyb21SZWRpc1RvUXVldWUodHJ1ZSlcblxuICAgICAgY2xpZW50LnN1YnNjcmliZShAY2hhbm5lbEtleSgpKVxuXG4gICAgICBjYigpXG5cbiAgcHVzaEpvYjogKGpvYkRpY3QsIGNiKSAtPlxuICAgICMgY29uc29sZS5sb2cgJ1BVU0hKT0InXG4gICAgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KGpvYkRpY3QpXG4gICAgYXN5bmMuc2VyaWVzIFtcbiAgICAgIChjYWxsYmFjaykgPT5cbiAgICAgICAgQG9idGFpbkxpc3RDbGllbnQgKGVycixjbGllbnQpID0+XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNyZWF0ZUVycm9yKGVyciwgJ0xJU1ROT1RGT1VORCcpKSBpZiBlcnJcbiAgICAgICAgICBjbGllbnQucnB1c2goQGxpc3RLZXkoKSwgcGF5bG9hZCwgY2FsbGJhY2spXG4gICAgICAoY2FsbGJhY2spID0+XG4gICAgICAgIEBvYnRhaW5MaXN0Q2xpZW50IChlcnIsY2xpZW50KSA9PlxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjcmVhdGVFcnJvcihlcnIsICdMSVNUTk9URk9VTkQnKSkgaWYgZXJyXG4gICAgICAgICAgY2xpZW50LnB1Ymxpc2goQGNoYW5uZWxLZXkoKSwgcGF5bG9hZCwgY2FsbGJhY2spXG4gICAgXSwgKGVycikgLT5cbiAgICAgIGNiKGNyZWF0ZUVycm9yKGVyciwgJ1BVU0hKT0InKSlcblxuICBfY2FuVGFrZU5ld1Rhc2tzOiAoKSAtPlxuICAgIHJldHVybiBAcXVldWUucnVubmluZygpK0BxdWV1ZS5sZW5ndGgoKSA8IEB0YXNrTGltaXRcblxuICBfZmV0Y2hKb2JGcm9tUmVkaXNUb1F1ZXVlOiAoZm9yY2UpIC0+XG4gICAgaWYgKG5vdCBAcmVkaXNRdWV1ZUVtcHR5IG9yIGZvcmNlKSBhbmQgbm90IEBlcnJJblF1ZXVlIFxuICAgICAgdG1wVGFza05vID0gQHRhc2tOb1xuICAgICAgQHF1ZXVlLnB1c2ggQHRhc2tObywgKGVycikgPT5cbiAgICAgICAgIyBjb25zb2xlLmxvZyAnXFxuPj4+PiBGSU5JU0hFRCBUQVNLJywgdG1wVGFza05vLCAnXFxuJ1xuICAgICAgICByZXR1cm5cbiAgICAgICMgY29uc29sZS5sb2cgJz4+Pj4+IEZFVENIRUQgam9iIGFuZCBhZGRlZCB0byBRVUVVRSdcbiAgICAgICMgY29uc29sZS5sb2cgJ3Rhc2tObycsIEB0YXNrTm9cbiAgICAgICMgY29uc29sZS5sb2cgJ3Rhc2tMaW1pdCcsIEB0YXNrTGltaXRcbiAgICAgICMgY29uc29sZS5sb2cgJ2NhbiB0YWtlIG5ldyB0YXNrcycsIEBfY2FuVGFrZU5ld1Rhc2tzKClcbiAgICAgIEB0YXNrTm8rK1xuIFxuXG4jIyMgIyMjXG4jIEVYUE9SVFNcbmV4cG9ydHMuV29ya2VyID0gV29ya2VyXG5leHBvcnRzLldvcmtlckVycm9yID0gV29ya2VyRXJyb3JcbiJdfQ==